package eduonix.nativeapp.libusb;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>libusb</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("C:\\Users\\ubu\\eduonixnativeapps\\genwrap\\libusb")
@Runtime(CRuntime.class) 
public class LibusbLibrary {
	static {
		BridJ.register();
	}
	/**
	 * \ingroup desc
<br>
	 * Device and/or Interface Class codes<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:40</i>
	 */
	public enum libusb_class_code implements IntValuedEnum<libusb_class_code > {
		LIBUSB_CLASS_PER_INTERFACE(0),
		LIBUSB_CLASS_AUDIO(1),
		LIBUSB_CLASS_COMM(2),
		LIBUSB_CLASS_HID(3),
		LIBUSB_CLASS_PHYSICAL(5),
		LIBUSB_CLASS_PRINTER(7),
		/** legacy name from libusb-0.1 usb.h */
		LIBUSB_CLASS_PTP(6),
		LIBUSB_CLASS_IMAGE(6),
		LIBUSB_CLASS_MASS_STORAGE(8),
		LIBUSB_CLASS_HUB(9),
		LIBUSB_CLASS_DATA(10),
		LIBUSB_CLASS_SMART_CARD(0x0b),
		LIBUSB_CLASS_CONTENT_SECURITY(0x0d),
		LIBUSB_CLASS_VIDEO(0x0e),
		LIBUSB_CLASS_PERSONAL_HEALTHCARE(0x0f),
		LIBUSB_CLASS_DIAGNOSTIC_DEVICE(0xdc),
		LIBUSB_CLASS_WIRELESS(0xe0),
		LIBUSB_CLASS_APPLICATION(0xfe),
		LIBUSB_CLASS_VENDOR_SPEC(0xff);
		libusb_class_code(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_class_code > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_class_code > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup desc
<br>
	 * Descriptor types as defined by the USB specification.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:59</i>
	 */
	public enum libusb_descriptor_type implements IntValuedEnum<libusb_descriptor_type > {
		LIBUSB_DT_DEVICE(0x01),
		LIBUSB_DT_CONFIG(0x02),
		LIBUSB_DT_STRING(0x03),
		LIBUSB_DT_INTERFACE(0x04),
		LIBUSB_DT_ENDPOINT(0x05),
		LIBUSB_DT_BOS(0x0f),
		LIBUSB_DT_DEVICE_CAPABILITY(0x10),
		LIBUSB_DT_HID(0x21),
		LIBUSB_DT_REPORT(0x22),
		LIBUSB_DT_PHYSICAL(0x23),
		LIBUSB_DT_HUB(0x29),
		LIBUSB_DT_SUPERSPEED_HUB(0x2a),
		LIBUSB_DT_SS_ENDPOINT_COMPANION(0x30);
		libusb_descriptor_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_descriptor_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_descriptor_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup desc
<br>
	 * Endpoint direction. Values for bit 7 of the
<br>
	 * \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:68</i>
	 */
	public enum libusb_endpoint_direction implements IntValuedEnum<libusb_endpoint_direction > {
		LIBUSB_ENDPOINT_IN(0x80),
		LIBUSB_ENDPOINT_OUT(0x00);
		libusb_endpoint_direction(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_endpoint_direction > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_endpoint_direction > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup desc
<br>
	 * Endpoint transfer type. Values for bits 0:1 of the
<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:80</i>
	 */
	public enum libusb_transfer_type implements IntValuedEnum<libusb_transfer_type > {
		LIBUSB_TRANSFER_TYPE_CONTROL(0),
		LIBUSB_TRANSFER_TYPE_ISOCHRONOUS(1),
		LIBUSB_TRANSFER_TYPE_BULK(2),
		LIBUSB_TRANSFER_TYPE_INTERRUPT(3),
		LIBUSB_TRANSFER_TYPE_BULK_STREAM(4);
		libusb_transfer_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_transfer_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_transfer_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Standard requests, as defined in table 9-5 of the USB 3.0 specifications<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:99</i>
	 */
	public enum libusb_standard_request implements IntValuedEnum<libusb_standard_request > {
		LIBUSB_REQUEST_GET_STATUS(0x00),
		LIBUSB_REQUEST_CLEAR_FEATURE(0x01),
		LIBUSB_REQUEST_SET_FEATURE(0x03),
		LIBUSB_REQUEST_SET_ADDRESS(0x05),
		LIBUSB_REQUEST_GET_DESCRIPTOR(0x06),
		LIBUSB_REQUEST_SET_DESCRIPTOR(0x07),
		LIBUSB_REQUEST_GET_CONFIGURATION(0x08),
		LIBUSB_REQUEST_SET_CONFIGURATION(0x09),
		LIBUSB_REQUEST_GET_INTERFACE(0x0A),
		LIBUSB_REQUEST_SET_INTERFACE(0x0B),
		LIBUSB_REQUEST_SYNCH_FRAME(0x0C),
		LIBUSB_REQUEST_SET_SEL(0x30),
		LIBUSB_SET_ISOCH_DELAY(0x31);
		libusb_standard_request(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_standard_request > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_standard_request > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Request type bits of the
<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
<br>
	 * transfers.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:111</i>
	 */
	public enum libusb_request_type implements IntValuedEnum<libusb_request_type > {
		LIBUSB_REQUEST_TYPE_STANDARD((0x00 << 5)),
		LIBUSB_REQUEST_TYPE_CLASS((0x01 << 5)),
		LIBUSB_REQUEST_TYPE_VENDOR((0x02 << 5)),
		LIBUSB_REQUEST_TYPE_RESERVED((0x03 << 5));
		libusb_request_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_request_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_request_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Recipient bits of the
<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control
<br>
	 * transfers. Values 4 through 31 are reserved.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:123</i>
	 */
	public enum libusb_request_recipient implements IntValuedEnum<libusb_request_recipient > {
		LIBUSB_RECIPIENT_DEVICE(0x00),
		LIBUSB_RECIPIENT_INTERFACE(0x01),
		LIBUSB_RECIPIENT_ENDPOINT(0x02),
		LIBUSB_RECIPIENT_OTHER(0x03);
		libusb_request_recipient(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_request_recipient > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_request_recipient > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup desc
<br>
	 * Synchronization type for isochronous endpoints. Values for bits 2:3 of the
<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
<br>
	 * libusb_endpoint_descriptor.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:135</i>
	 */
	public enum libusb_iso_sync_type implements IntValuedEnum<libusb_iso_sync_type > {
		LIBUSB_ISO_SYNC_TYPE_NONE(0),
		LIBUSB_ISO_SYNC_TYPE_ASYNC(1),
		LIBUSB_ISO_SYNC_TYPE_ADAPTIVE(2),
		LIBUSB_ISO_SYNC_TYPE_SYNC(3);
		libusb_iso_sync_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_iso_sync_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_iso_sync_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup desc
<br>
	 * Usage type for isochronous endpoints. Values for bits 4:5 of the
<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in
<br>
	 * libusb_endpoint_descriptor.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:146</i>
	 */
	public enum libusb_iso_usage_type implements IntValuedEnum<libusb_iso_usage_type > {
		LIBUSB_ISO_USAGE_TYPE_DATA(0),
		LIBUSB_ISO_USAGE_TYPE_FEEDBACK(1),
		LIBUSB_ISO_USAGE_TYPE_IMPLICIT(2);
		libusb_iso_usage_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_iso_usage_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_iso_usage_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup dev
<br>
	 * Speed codes. Indicates the speed at which the device is operating.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:398</i>
	 */
	public enum libusb_speed implements IntValuedEnum<libusb_speed > {
		LIBUSB_SPEED_UNKNOWN(0),
		LIBUSB_SPEED_LOW(1),
		LIBUSB_SPEED_FULL(2),
		LIBUSB_SPEED_HIGH(3),
		LIBUSB_SPEED_SUPER(4);
		libusb_speed(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_speed > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_speed > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup dev
<br>
	 * Supported speeds (wSpeedSupported) bitfield. Indicates what
<br>
	 * speeds the device supports.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:409</i>
	 */
	public enum libusb_supported_speed implements IntValuedEnum<libusb_supported_speed > {
		LIBUSB_LOW_SPEED_OPERATION(1),
		LIBUSB_FULL_SPEED_OPERATION(2),
		LIBUSB_HIGH_SPEED_OPERATION(4),
		LIBUSB_SUPER_SPEED_OPERATION(8);
		libusb_supported_speed(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_supported_speed > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_supported_speed > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup dev
<br>
	 * Masks for the bits of the
<br>
	 * \ref libusb_usb_2_0_extension_descriptor::bmAttributes "bmAttributes" field
<br>
	 * of the USB 2.0 Extension descriptor.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:418</i>
	 */
	public enum libusb_usb_2_0_extension_attributes implements IntValuedEnum<libusb_usb_2_0_extension_attributes > {
		LIBUSB_BM_LPM_SUPPORT(2);
		libusb_usb_2_0_extension_attributes(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_usb_2_0_extension_attributes > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_usb_2_0_extension_attributes > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup dev
<br>
	 * Masks for the bits of the
<br>
	 * \ref libusb_ss_usb_device_capability_descriptor::bmAttributes "bmAttributes" field
<br>
	 * field of the SuperSpeed USB Device Capability descriptor.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:427</i>
	 */
	public enum libusb_ss_usb_device_capability_attributes implements IntValuedEnum<libusb_ss_usb_device_capability_attributes > {
		LIBUSB_BM_LTM_SUPPORT(2);
		libusb_ss_usb_device_capability_attributes(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_ss_usb_device_capability_attributes > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_ss_usb_device_capability_attributes > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup dev
<br>
	 * USB capability types<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:437</i>
	 */
	public enum libusb_bos_type implements IntValuedEnum<libusb_bos_type > {
		LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY(1),
		LIBUSB_BT_USB_2_0_EXTENSION(2),
		LIBUSB_BT_SS_USB_DEVICE_CAPABILITY(3),
		LIBUSB_BT_CONTAINER_ID(4);
		libusb_bos_type(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_bos_type > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_bos_type > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Error codes. Most libusb functions return 0 on success or one of these
<br>
	 * codes on failure.
<br>
	 * You can call libusb_error_name() to retrieve a string representation of an
<br>
	 * error code or libusb_strerror() to get an end-user suitable description of
<br>
	 * an error code.<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:461</i>
	 */
	public enum libusb_error implements IntValuedEnum<libusb_error > {
		LIBUSB_SUCCESS(0),
		LIBUSB_ERROR_IO(-1),
		LIBUSB_ERROR_INVALID_PARAM(-2),
		LIBUSB_ERROR_ACCESS(-3),
		LIBUSB_ERROR_NO_DEVICE(-4),
		LIBUSB_ERROR_NOT_FOUND(-5),
		LIBUSB_ERROR_BUSY(-6),
		LIBUSB_ERROR_TIMEOUT(-7),
		LIBUSB_ERROR_OVERFLOW(-8),
		LIBUSB_ERROR_PIPE(-9),
		LIBUSB_ERROR_INTERRUPTED(-10),
		LIBUSB_ERROR_NO_MEM(-11),
		LIBUSB_ERROR_NOT_SUPPORTED(-12),
		LIBUSB_ERROR_OTHER(-99);
		libusb_error(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_error > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_error > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup asyncio
<br>
	 * Transfer status codes<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:474</i>
	 */
	public enum libusb_transfer_status implements IntValuedEnum<libusb_transfer_status > {
		LIBUSB_TRANSFER_COMPLETED(0),
		LIBUSB_TRANSFER_ERROR(1),
		LIBUSB_TRANSFER_TIMED_OUT(2),
		LIBUSB_TRANSFER_CANCELLED(3),
		LIBUSB_TRANSFER_STALL(4),
		LIBUSB_TRANSFER_NO_DEVICE(5),
		LIBUSB_TRANSFER_OVERFLOW(6);
		libusb_transfer_status(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_transfer_status > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_transfer_status > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup asyncio
<br>
	 * libusb_transfer.flags values<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:484</i>
	 */
	public enum libusb_transfer_flags implements IntValuedEnum<libusb_transfer_flags > {
		LIBUSB_TRANSFER_SHORT_NOT_OK(1 << 0),
		LIBUSB_TRANSFER_FREE_BUFFER(1 << 1),
		LIBUSB_TRANSFER_FREE_TRANSFER(1 << 2),
		LIBUSB_TRANSFER_ADD_ZERO_PACKET(1 << 3);
		libusb_transfer_flags(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_transfer_flags > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_transfer_flags > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Capabilities supported by an instance of libusb on the current running
<br>
	 * platform. Test if the loaded library supports a given capability by calling
<br>
	 * \ref libusb_has_capability().<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:543</i>
	 */
	public enum libusb_capability implements IntValuedEnum<libusb_capability > {
		LIBUSB_CAP_HAS_CAPABILITY(0x0000),
		LIBUSB_CAP_HAS_HOTPLUG(0x0001),
		LIBUSB_CAP_HAS_HID_ACCESS(0x0100),
		LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER(0x0101);
		libusb_capability(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_capability > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_capability > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * \ingroup lib
<br>
	 *  Log message levels.
<br>
	 *  - LIBUSB_LOG_LEVEL_NONE (0)    : no messages ever printed by the library (default)
<br>
	 *  - LIBUSB_LOG_LEVEL_ERROR (1)   : error messages are printed to stderr
<br>
	 *  - LIBUSB_LOG_LEVEL_WARNING (2) : warning and error messages are printed to stderr
<br>
	 *  - LIBUSB_LOG_LEVEL_INFO (3)    : informational messages are printed to stdout, warning
<br>
	 *    and error messages are printed to stderr
<br>
	 *  - LIBUSB_LOG_LEVEL_DEBUG (4)   : debug and informational messages are printed to stdout,
<br>
	 *    warnings and errors to stderr<br>
	 * enum values<br>
	 * <i>native declaration : libusb.h:561</i>
	 */
	public enum libusb_log_level implements IntValuedEnum<libusb_log_level > {
		LIBUSB_LOG_LEVEL_NONE(0),
		LIBUSB_LOG_LEVEL_ERROR(1),
		LIBUSB_LOG_LEVEL_WARNING(2),
		LIBUSB_LOG_LEVEL_INFO(3),
		LIBUSB_LOG_LEVEL_DEBUG(4);
		libusb_log_level(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_log_level > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_log_level > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libusb.h:1099</i>
	 */
	public enum libusb_hotplug_flag implements IntValuedEnum<libusb_hotplug_flag > {
		LIBUSB_HOTPLUG_ENUMERATE(1);
		libusb_hotplug_flag(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_hotplug_flag > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_hotplug_flag > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : libusb.h:1110</i>
	 */
	public enum libusb_hotplug_event implements IntValuedEnum<libusb_hotplug_event > {
		LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED(0x01),
		LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT(0x02);
		libusb_hotplug_event(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<libusb_hotplug_event > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<libusb_hotplug_event > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_API_VERSION = (int)0x01000103;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSBX_API_VERSION = (int)0x01000103;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_DEVICE_SIZE = (int)18;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_CONFIG_SIZE = (int)9;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_INTERFACE_SIZE = (int)9;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_ENDPOINT_SIZE = (int)7;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_ENDPOINT_AUDIO_SIZE = (int)9;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_HUB_NONVAR_SIZE = (int)7;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE = (int)6;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_BOS_SIZE = (int)5;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_DEVICE_CAPABILITY_SIZE = (int)3;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_BT_USB_2_0_EXTENSION_SIZE = (int)7;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE = (int)10;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_BT_CONTAINER_ID_SIZE = (int)20;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_DT_BOS_MAX_SIZE = (int)((5) + (7) + (10) + (20));
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_ENDPOINT_ADDRESS_MASK = (int)0x0f;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_ENDPOINT_DIR_MASK = (int)0x80;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_TRANSFER_TYPE_MASK = (int)0x03;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_ISO_SYNC_TYPE_MASK = (int)0x0C;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_ISO_USAGE_TYPE_MASK = (int)0x30;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_ERROR_COUNT = (int)14;
	/** <i>native declaration : libusb.h</i> */
	public static final int LIBUSB_HOTPLUG_MATCH_ANY = (int)-1;
	/** <i>native declaration : libusb.h:507</i> */
	public static abstract class libusb_transfer_cb_fn extends Callback<libusb_transfer_cb_fn > {

		public abstract int apply();

		@Convention(Style.StdCall)
		public void apply(Pointer<libusb_transfer > transfer) {
			apply(Pointer.getPeer(transfer));
		}
		@Convention(Style.StdCall)
		public void apply(@Ptr long transfer) {
			apply((Pointer)Pointer.pointerToAddress(transfer, libusb_transfer.class));
		}
	};
	/** <i>native declaration : libusb.h:1060</i> */
	public static abstract class libusb_pollfd_added_cb extends Callback<libusb_pollfd_added_cb > {

		public abstract int apply();

		@Convention(Style.StdCall)
		public void apply(int fd, short events, Pointer<? > user_data) {
			apply(fd, events, Pointer.getPeer(user_data));
		}
		@Convention(Style.StdCall)
		public void apply(int fd, short events, @Ptr long user_data) {
			apply(fd, events, Pointer.pointerToAddress(user_data));
		}
	};
	/** <i>native declaration : libusb.h:1071</i> */
	public static abstract class libusb_pollfd_removed_cb extends Callback<libusb_pollfd_removed_cb > {

		public abstract int apply();

		@Convention(Style.StdCall)
		public void apply(int fd, Pointer<? > user_data) {
			apply(fd, Pointer.getPeer(user_data));
		}
		@Convention(Style.StdCall)
		public void apply(int fd, @Ptr long user_data) {
			apply(fd, Pointer.pointerToAddress(user_data));
		}
	};
	/** <i>native declaration : libusb.h:1134</i> */
	public static abstract class libusb_hotplug_callback_fn extends Callback<libusb_hotplug_callback_fn > {

		public abstract int apply();

		@Convention(Style.StdCall)
		public int apply(Pointer<libusb_context > ctx, Pointer<libusb_device > device, IntValuedEnum<libusb_hotplug_event > event, Pointer<? > user_data) {
			return apply(Pointer.getPeer(ctx), Pointer.getPeer(device), (int)event.value(), Pointer.getPeer(user_data));
		}
		@Convention(Style.StdCall)
		public int apply(@Ptr long ctx, @Ptr long device, int event, @Ptr long user_data) {
			return apply((Pointer)Pointer.pointerToAddress(ctx, libusb_context.class), (Pointer)Pointer.pointerToAddress(device, libusb_device.class), FlagSet.fromValue(event, libusb_hotplug_event.class), Pointer.pointerToAddress(user_data));
		}
	};
	/**
	 * \ingroup misc
<br>
	 * Convert a 16-bit value from host-endian to little-endian format. On
<br>
	 * little endian systems, this function does nothing. On big endian systems,
<br>
	 * the bytes are swapped.
<br>
	 * \param x the host-endian value to convert
<br>
	 * \returns the value in little-endian byte order<br>
	 * Original signature : <code>uint16_t libusb_cpu_to_le16(const uint16_t)</code><br>
	 * <i>native declaration : libusb.h:15</i>
	 */
	public static native short libusb_cpu_to_le16(short x);
	/**
	 * Original signature : <code>int libusb_init(libusb_context**)</code><br>
	 * <i>native declaration : libusb.h:563</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_init(Pointer<Pointer<libusb_context > > ctx) {
		return libusb_init(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_init(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_exit(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:565</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_exit(Pointer<libusb_context > ctx) {
		libusb_exit(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_exit(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_set_debug(libusb_context*, int)</code><br>
	 * <i>native declaration : libusb.h:567</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_set_debug(Pointer<libusb_context > ctx, int level) {
		libusb_set_debug(Pointer.getPeer(ctx), level);
	}
	@Convention(Style.StdCall)
	protected native static void libusb_set_debug(@Ptr long ctx, int level);
	/**
	 * Original signature : <code>libusb_version* libusb_get_version()</code><br>
	 * <i>native declaration : libusb.h:569</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_version > libusb_get_version() {
		return (Pointer)Pointer.pointerToAddress(libusb_get_version$2(), libusb_version.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	@Name("libusb_get_version") 
	protected native static long libusb_get_version$2();
	/**
	 * Original signature : <code>int libusb_has_capability(uint32_t)</code><br>
	 * <i>native declaration : libusb.h:571</i>
	 */
	@Convention(Style.StdCall)
	public static native int libusb_has_capability(int capability);
	/**
	 * Original signature : <code>char* libusb_error_name(int)</code><br>
	 * <i>native declaration : libusb.h:573</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<Byte > libusb_error_name(int errcode) {
		return (Pointer)Pointer.pointerToAddress(libusb_error_name$2(errcode), Byte.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	@Name("libusb_error_name") 
	protected native static long libusb_error_name$2(int errcode);
	/**
	 * Original signature : <code>int libusb_setlocale(const char*)</code><br>
	 * <i>native declaration : libusb.h:575</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_setlocale(Pointer<Byte > locale) {
		return libusb_setlocale(Pointer.getPeer(locale));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_setlocale(@Ptr long locale);
	/**
	 * Original signature : <code>char* libusb_strerror(libusb_error)</code><br>
	 * <i>native declaration : libusb.h:577</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<Byte > libusb_strerror(IntValuedEnum<libusb_error > errcode) {
		return (Pointer)Pointer.pointerToAddress(libusb_strerror((int)errcode.value()), Byte.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_strerror(int errcode);
	/**
	 * Original signature : <code>ssize_t libusb_get_device_list(libusb_context*, libusb_device***)</code><br>
	 * <i>native declaration : libusb.h:579</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_device_list(Pointer<libusb_context > ctx, Pointer<Pointer<Pointer<libusb_device > > > list) {
		return libusb_get_device_list(Pointer.getPeer(ctx), Pointer.getPeer(list));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_device_list(@Ptr long ctx, @Ptr long list);
	/**
	 * Original signature : <code>void libusb_free_device_list(libusb_device**, int)</code><br>
	 * <i>native declaration : libusb.h:581</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_device_list(Pointer<Pointer<libusb_device > > list, int unref_devices) {
		libusb_free_device_list(Pointer.getPeer(list), unref_devices);
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_device_list(@Ptr long list, int unref_devices);
	/**
	 * Original signature : <code>libusb_device* libusb_ref_device(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:583</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_device > libusb_ref_device(Pointer<libusb_device > dev) {
		return (Pointer)Pointer.pointerToAddress(libusb_ref_device(Pointer.getPeer(dev)), libusb_device.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_ref_device(@Ptr long dev);
	/**
	 * Original signature : <code>void libusb_unref_device(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:585</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_unref_device(Pointer<libusb_device > dev) {
		libusb_unref_device(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_unref_device(@Ptr long dev);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : libusb.h:587</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_configuration(Pointer<libusb_device_handle > dev, Pointer<Integer > config) {
		return libusb_get_configuration(Pointer.getPeer(dev), Pointer.getPeer(config));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_configuration(@Ptr long dev, @Ptr long config);
	/**
	 * Original signature : <code>int libusb_get_device_descriptor(libusb_device*, libusb_device_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:589</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_device_descriptor(Pointer<libusb_device > dev, Pointer<libusb_device_descriptor > desc) {
		return libusb_get_device_descriptor(Pointer.getPeer(dev), Pointer.getPeer(desc));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_device_descriptor(@Ptr long dev, @Ptr long desc);
	/**
	 * Original signature : <code>int libusb_get_active_config_descriptor(libusb_device*, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:591</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_active_config_descriptor(Pointer<libusb_device > dev, Pointer<Pointer<libusb_config_descriptor > > config) {
		return libusb_get_active_config_descriptor(Pointer.getPeer(dev), Pointer.getPeer(config));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_active_config_descriptor(@Ptr long dev, @Ptr long config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:593</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_config_descriptor(Pointer<libusb_device > dev, byte config_index, Pointer<Pointer<libusb_config_descriptor > > config) {
		return libusb_get_config_descriptor(Pointer.getPeer(dev), config_index, Pointer.getPeer(config));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_config_descriptor(@Ptr long dev, byte config_index, @Ptr long config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor_by_value(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:595</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_config_descriptor_by_value(Pointer<libusb_device > dev, byte bConfigurationValue, Pointer<Pointer<libusb_config_descriptor > > config) {
		return libusb_get_config_descriptor_by_value(Pointer.getPeer(dev), bConfigurationValue, Pointer.getPeer(config));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_config_descriptor_by_value(@Ptr long dev, byte bConfigurationValue, @Ptr long config);
	/**
	 * Original signature : <code>void libusb_free_config_descriptor(libusb_config_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:597</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_config_descriptor(Pointer<libusb_config_descriptor > config) {
		libusb_free_config_descriptor(Pointer.getPeer(config));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_config_descriptor(@Ptr long config);
	/**
	 * Original signature : <code>int libusb_get_ss_endpoint_companion_descriptor(libusb_context*, libusb_endpoint_descriptor*, libusb_ss_endpoint_companion_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:599</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_ss_endpoint_companion_descriptor(Pointer<libusb_context > ctx, Pointer<libusb_endpoint_descriptor > endpoint, Pointer<Pointer<libusb_ss_endpoint_companion_descriptor > > ep_comp) {
		return libusb_get_ss_endpoint_companion_descriptor(Pointer.getPeer(ctx), Pointer.getPeer(endpoint), Pointer.getPeer(ep_comp));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_ss_endpoint_companion_descriptor(@Ptr long ctx, @Ptr long endpoint, @Ptr long ep_comp);
	/**
	 * Original signature : <code>void libusb_free_ss_endpoint_companion_descriptor(libusb_ss_endpoint_companion_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:601</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_ss_endpoint_companion_descriptor(Pointer<libusb_ss_endpoint_companion_descriptor > ep_comp) {
		libusb_free_ss_endpoint_companion_descriptor(Pointer.getPeer(ep_comp));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_ss_endpoint_companion_descriptor(@Ptr long ep_comp);
	/**
	 * Original signature : <code>int libusb_get_bos_descriptor(libusb_device_handle*, libusb_bos_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:603</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_bos_descriptor(Pointer<libusb_device_handle > handle, Pointer<Pointer<libusb_bos_descriptor > > bos) {
		return libusb_get_bos_descriptor(Pointer.getPeer(handle), Pointer.getPeer(bos));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_bos_descriptor(@Ptr long handle, @Ptr long bos);
	/**
	 * Original signature : <code>void libusb_free_bos_descriptor(libusb_bos_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:605</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_bos_descriptor(Pointer<libusb_bos_descriptor > bos) {
		libusb_free_bos_descriptor(Pointer.getPeer(bos));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_bos_descriptor(@Ptr long bos);
	/**
	 * Original signature : <code>int libusb_get_usb_2_0_extension_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_usb_2_0_extension_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:607</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_usb_2_0_extension_descriptor(Pointer<libusb_context > ctx, Pointer<libusb_bos_dev_capability_descriptor > dev_cap, Pointer<Pointer<libusb_usb_2_0_extension_descriptor > > usb_2_0_extension) {
		return libusb_get_usb_2_0_extension_descriptor(Pointer.getPeer(ctx), Pointer.getPeer(dev_cap), Pointer.getPeer(usb_2_0_extension));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_usb_2_0_extension_descriptor(@Ptr long ctx, @Ptr long dev_cap, @Ptr long usb_2_0_extension);
	/**
	 * Original signature : <code>void libusb_free_usb_2_0_extension_descriptor(libusb_usb_2_0_extension_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:609</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_usb_2_0_extension_descriptor(Pointer<libusb_usb_2_0_extension_descriptor > usb_2_0_extension) {
		libusb_free_usb_2_0_extension_descriptor(Pointer.getPeer(usb_2_0_extension));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_usb_2_0_extension_descriptor(@Ptr long usb_2_0_extension);
	/**
	 * Original signature : <code>int libusb_get_ss_usb_device_capability_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_ss_usb_device_capability_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:611</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_ss_usb_device_capability_descriptor(Pointer<libusb_context > ctx, Pointer<libusb_bos_dev_capability_descriptor > dev_cap, Pointer<Pointer<libusb_ss_usb_device_capability_descriptor > > ss_usb_device_cap) {
		return libusb_get_ss_usb_device_capability_descriptor(Pointer.getPeer(ctx), Pointer.getPeer(dev_cap), Pointer.getPeer(ss_usb_device_cap));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_ss_usb_device_capability_descriptor(@Ptr long ctx, @Ptr long dev_cap, @Ptr long ss_usb_device_cap);
	/**
	 * Original signature : <code>void libusb_free_ss_usb_device_capability_descriptor(libusb_ss_usb_device_capability_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:613</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_ss_usb_device_capability_descriptor(Pointer<libusb_ss_usb_device_capability_descriptor > ss_usb_device_cap) {
		libusb_free_ss_usb_device_capability_descriptor(Pointer.getPeer(ss_usb_device_cap));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_ss_usb_device_capability_descriptor(@Ptr long ss_usb_device_cap);
	/**
	 * Original signature : <code>int libusb_get_container_id_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_container_id_descriptor**)</code><br>
	 * <i>native declaration : libusb.h:615</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_container_id_descriptor(Pointer<libusb_context > ctx, Pointer<libusb_bos_dev_capability_descriptor > dev_cap, Pointer<Pointer<libusb_container_id_descriptor > > container_id) {
		return libusb_get_container_id_descriptor(Pointer.getPeer(ctx), Pointer.getPeer(dev_cap), Pointer.getPeer(container_id));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_container_id_descriptor(@Ptr long ctx, @Ptr long dev_cap, @Ptr long container_id);
	/**
	 * Original signature : <code>void libusb_free_container_id_descriptor(libusb_container_id_descriptor*)</code><br>
	 * <i>native declaration : libusb.h:617</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_container_id_descriptor(Pointer<libusb_container_id_descriptor > container_id) {
		libusb_free_container_id_descriptor(Pointer.getPeer(container_id));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_container_id_descriptor(@Ptr long container_id);
	/**
	 * Original signature : <code>uint8_t libusb_get_bus_number(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:619</i>
	 */
	@Convention(Style.StdCall)
	public static byte libusb_get_bus_number(Pointer<libusb_device > dev) {
		return libusb_get_bus_number(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static byte libusb_get_bus_number(@Ptr long dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_port_number(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:621</i>
	 */
	@Convention(Style.StdCall)
	public static byte libusb_get_port_number(Pointer<libusb_device > dev) {
		return libusb_get_port_number(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static byte libusb_get_port_number(@Ptr long dev);
	/**
	 * Original signature : <code>int libusb_get_port_numbers(libusb_device*, uint8_t*, int)</code><br>
	 * <i>native declaration : libusb.h:623</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_port_numbers(Pointer<libusb_device > dev, Pointer<Byte > port_numbers, int port_numbers_len) {
		return libusb_get_port_numbers(Pointer.getPeer(dev), Pointer.getPeer(port_numbers), port_numbers_len);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_port_numbers(@Ptr long dev, @Ptr long port_numbers, int port_numbers_len);
	/**
	 * Original signature : <code>int libusb_get_port_path(libusb_context*, libusb_device*, uint8_t*, uint8_t)</code><br>
	 * <i>native declaration : libusb.h:625</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_port_path(Pointer<libusb_context > ctx, Pointer<libusb_device > dev, Pointer<Byte > path, byte path_length) {
		return libusb_get_port_path(Pointer.getPeer(ctx), Pointer.getPeer(dev), Pointer.getPeer(path), path_length);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_port_path(@Ptr long ctx, @Ptr long dev, @Ptr long path, byte path_length);
	/**
	 * Original signature : <code>libusb_device* libusb_get_parent(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:627</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_device > libusb_get_parent(Pointer<libusb_device > dev) {
		return (Pointer)Pointer.pointerToAddress(libusb_get_parent(Pointer.getPeer(dev)), libusb_device.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_get_parent(@Ptr long dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_device_address(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:629</i>
	 */
	@Convention(Style.StdCall)
	public static byte libusb_get_device_address(Pointer<libusb_device > dev) {
		return libusb_get_device_address(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static byte libusb_get_device_address(@Ptr long dev);
	/**
	 * Original signature : <code>int libusb_get_device_speed(libusb_device*)</code><br>
	 * <i>native declaration : libusb.h:631</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_device_speed(Pointer<libusb_device > dev) {
		return libusb_get_device_speed(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_device_speed(@Ptr long dev);
	/**
	 * Original signature : <code>int libusb_get_max_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : libusb.h:633</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_max_packet_size(Pointer<libusb_device > dev, byte endpoint) {
		return libusb_get_max_packet_size(Pointer.getPeer(dev), endpoint);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_max_packet_size(@Ptr long dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_iso_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : libusb.h:635</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_max_iso_packet_size(Pointer<libusb_device > dev, byte endpoint) {
		return libusb_get_max_iso_packet_size(Pointer.getPeer(dev), endpoint);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_max_iso_packet_size(@Ptr long dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_open(libusb_device*, libusb_device_handle**)</code><br>
	 * <i>native declaration : libusb.h:637</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_open(Pointer<libusb_device > dev, Pointer<Pointer<libusb_device_handle > > handle) {
		return libusb_open(Pointer.getPeer(dev), Pointer.getPeer(handle));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_open(@Ptr long dev, @Ptr long handle);
	/**
	 * Original signature : <code>void libusb_close(libusb_device_handle*)</code><br>
	 * <i>native declaration : libusb.h:639</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_close(Pointer<libusb_device_handle > dev_handle) {
		libusb_close(Pointer.getPeer(dev_handle));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_close(@Ptr long dev_handle);
	/**
	 * Original signature : <code>libusb_device* libusb_get_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : libusb.h:641</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_device > libusb_get_device(Pointer<libusb_device_handle > dev_handle) {
		return (Pointer)Pointer.pointerToAddress(libusb_get_device(Pointer.getPeer(dev_handle)), libusb_device.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_get_device(@Ptr long dev_handle);
	/**
	 * Original signature : <code>int libusb_set_configuration(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:643</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_set_configuration(Pointer<libusb_device_handle > dev, int configuration) {
		return libusb_set_configuration(Pointer.getPeer(dev), configuration);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_set_configuration(@Ptr long dev, int configuration);
	/**
	 * Original signature : <code>int libusb_claim_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:645</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_claim_interface(Pointer<libusb_device_handle > dev, int interface_number) {
		return libusb_claim_interface(Pointer.getPeer(dev), interface_number);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_claim_interface(@Ptr long dev, int interface_number);
	/**
	 * Original signature : <code>int libusb_release_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:647</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_release_interface(Pointer<libusb_device_handle > dev, int interface_number) {
		return libusb_release_interface(Pointer.getPeer(dev), interface_number);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_release_interface(@Ptr long dev, int interface_number);
	/**
	 * Original signature : <code>libusb_device_handle* libusb_open_device_with_vid_pid(libusb_context*, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : libusb.h:649</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_device_handle > libusb_open_device_with_vid_pid(Pointer<libusb_context > ctx, short vendor_id, short product_id) {
		return (Pointer)Pointer.pointerToAddress(libusb_open_device_with_vid_pid(Pointer.getPeer(ctx), vendor_id, product_id), libusb_device_handle.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_open_device_with_vid_pid(@Ptr long ctx, short vendor_id, short product_id);
	/**
	 * Original signature : <code>int libusb_set_interface_alt_setting(libusb_device_handle*, int, int)</code><br>
	 * <i>native declaration : libusb.h:651</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_set_interface_alt_setting(Pointer<libusb_device_handle > dev, int interface_number, int alternate_setting) {
		return libusb_set_interface_alt_setting(Pointer.getPeer(dev), interface_number, alternate_setting);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_set_interface_alt_setting(@Ptr long dev, int interface_number, int alternate_setting);
	/**
	 * Original signature : <code>int libusb_clear_halt(libusb_device_handle*, unsigned char)</code><br>
	 * <i>native declaration : libusb.h:653</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_clear_halt(Pointer<libusb_device_handle > dev, byte endpoint) {
		return libusb_clear_halt(Pointer.getPeer(dev), endpoint);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_clear_halt(@Ptr long dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_reset_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : libusb.h:655</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_reset_device(Pointer<libusb_device_handle > dev) {
		return libusb_reset_device(Pointer.getPeer(dev));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_reset_device(@Ptr long dev);
	/**
	 * Original signature : <code>int libusb_alloc_streams(libusb_device_handle*, uint32_t, unsigned char*, int)</code><br>
	 * <i>native declaration : libusb.h:657</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_alloc_streams(Pointer<libusb_device_handle > dev, int num_streams, Pointer<Byte > endpoints, int num_endpoints) {
		return libusb_alloc_streams(Pointer.getPeer(dev), num_streams, Pointer.getPeer(endpoints), num_endpoints);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_alloc_streams(@Ptr long dev, int num_streams, @Ptr long endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_free_streams(libusb_device_handle*, unsigned char*, int)</code><br>
	 * <i>native declaration : libusb.h:659</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_free_streams(Pointer<libusb_device_handle > dev, Pointer<Byte > endpoints, int num_endpoints) {
		return libusb_free_streams(Pointer.getPeer(dev), Pointer.getPeer(endpoints), num_endpoints);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_free_streams(@Ptr long dev, @Ptr long endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_kernel_driver_active(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:661</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_kernel_driver_active(Pointer<libusb_device_handle > dev, int interface_number) {
		return libusb_kernel_driver_active(Pointer.getPeer(dev), interface_number);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_kernel_driver_active(@Ptr long dev, int interface_number);
	/**
	 * Original signature : <code>int libusb_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:663</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_detach_kernel_driver(Pointer<libusb_device_handle > dev, int interface_number) {
		return libusb_detach_kernel_driver(Pointer.getPeer(dev), interface_number);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_detach_kernel_driver(@Ptr long dev, int interface_number);
	/**
	 * Original signature : <code>int libusb_attach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:665</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_attach_kernel_driver(Pointer<libusb_device_handle > dev, int interface_number) {
		return libusb_attach_kernel_driver(Pointer.getPeer(dev), interface_number);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_attach_kernel_driver(@Ptr long dev, int interface_number);
	/**
	 * Original signature : <code>int libusb_set_auto_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : libusb.h:667</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_set_auto_detach_kernel_driver(Pointer<libusb_device_handle > dev, int enable) {
		return libusb_set_auto_detach_kernel_driver(Pointer.getPeer(dev), enable);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_set_auto_detach_kernel_driver(@Ptr long dev, int enable);
	/**
	 * \ingroup asyncio
<br>
	 * Get the data section of a control transfer. This convenience function is here
<br>
	 * to remind you that the data does not start until 8 bytes into the actual
<br>
	 * buffer, as the setup packet comes first.
<br>
	 * <br>
	 * Calling this function only makes sense from a transfer callback function,
<br>
	 * or situations where you have already allocated a suitably sized buffer at
<br>
	 * transfer->buffer.
<br>
	 * <br>
	 * \param transfer a transfer
<br>
	 * \returns pointer to the first byte of the data section<br>
	 * Original signature : <code>char* libusb_control_transfer_get_data(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:684</i>
	 */
	public static Pointer<Byte > libusb_control_transfer_get_data(Pointer<libusb_transfer > transfer) {
		return (Pointer)Pointer.pointerToAddress(libusb_control_transfer_get_data(Pointer.getPeer(transfer)), Byte.class);
	}
	@Ptr 
	protected native static long libusb_control_transfer_get_data(@Ptr long transfer);
	/**
	 * \ingroup asyncio
<br>
	 * Get the control setup packet of a control transfer. This convenience
<br>
	 * function is here to remind you that the control setup occupies the first
<br>
	 * 8 bytes of the transfer data buffer.
<br>
	 * <br>
	 * Calling this function only makes sense from a transfer callback function,
<br>
	 * or situations where you have already allocated a suitably sized buffer at
<br>
	 * transfer->buffer.
<br>
	 * <br>
	 * \param transfer a transfer
<br>
	 * \returns a casted pointer to the start of the transfer data buffer<br>
	 * Original signature : <code>libusb_control_setup* libusb_control_transfer_get_setup(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:701</i>
	 */
	public static Pointer<libusb_control_setup > libusb_control_transfer_get_setup(Pointer<libusb_transfer > transfer) {
		return (Pointer)Pointer.pointerToAddress(libusb_control_transfer_get_setup(Pointer.getPeer(transfer)), libusb_control_setup.class);
	}
	@Ptr 
	protected native static long libusb_control_transfer_get_setup(@Ptr long transfer);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the setup packet (first 8 bytes of the data
<br>
	 * buffer) for a control transfer. The wIndex, wValue and wLength values should
<br>
	 * be given in host-endian byte order.
<br>
	 * <br>
	 * \param buffer buffer to output the setup packet into
<br>
	 * This pointer must be aligned to at least 2 bytes boundary.
<br>
	 * \param bmRequestType see the
<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field of
<br>
	 * \ref libusb_control_setup
<br>
	 * \param bRequest see the
<br>
	 * \ref libusb_control_setup::bRequest "bRequest" field of
<br>
	 * \ref libusb_control_setup
<br>
	 * \param wValue see the
<br>
	 * \ref libusb_control_setup::wValue "wValue" field of
<br>
	 * \ref libusb_control_setup
<br>
	 * \param wIndex see the
<br>
	 * \ref libusb_control_setup::wIndex "wIndex" field of
<br>
	 * \ref libusb_control_setup
<br>
	 * \param wLength see the
<br>
	 * \ref libusb_control_setup::wLength "wLength" field of
<br>
	 * \ref libusb_control_setup<br>
	 * Original signature : <code>void libusb_fill_control_setup(unsigned char*, uint8_t, uint8_t, uint16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : libusb.h:734</i>
	 */
	public static void libusb_fill_control_setup(Pointer<Byte > buffer, byte bmRequestType, byte bRequest, short wValue, short wIndex, short wLength) {
		libusb_fill_control_setup(Pointer.getPeer(buffer), bmRequestType, bRequest, wValue, wIndex, wLength);
	}
	protected native static void libusb_fill_control_setup(@Ptr long buffer, byte bmRequestType, byte bRequest, short wValue, short wIndex, short wLength);
	/**
	 * Original signature : <code>libusb_transfer* libusb_alloc_transfer(int)</code><br>
	 * <i>native declaration : libusb.h:736</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<libusb_transfer > libusb_alloc_transfer(int iso_packets) {
		return (Pointer)Pointer.pointerToAddress(libusb_alloc_transfer$2(iso_packets), libusb_transfer.class);
	}
	@Convention(Style.StdCall)
	@Ptr 
	@Name("libusb_alloc_transfer") 
	protected native static long libusb_alloc_transfer$2(int iso_packets);
	/**
	 * Original signature : <code>int libusb_submit_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:738</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_submit_transfer(Pointer<libusb_transfer > transfer) {
		return libusb_submit_transfer(Pointer.getPeer(transfer));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_submit_transfer(@Ptr long transfer);
	/**
	 * Original signature : <code>int libusb_cancel_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:740</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_cancel_transfer(Pointer<libusb_transfer > transfer) {
		return libusb_cancel_transfer(Pointer.getPeer(transfer));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_cancel_transfer(@Ptr long transfer);
	/**
	 * Original signature : <code>void libusb_free_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:742</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_free_transfer(Pointer<libusb_transfer > transfer) {
		libusb_free_transfer(Pointer.getPeer(transfer));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_free_transfer(@Ptr long transfer);
	/**
	 * Original signature : <code>void libusb_transfer_set_stream_id(libusb_transfer*, uint32_t)</code><br>
	 * <i>native declaration : libusb.h:744</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_transfer_set_stream_id(Pointer<libusb_transfer > transfer, int stream_id) {
		libusb_transfer_set_stream_id(Pointer.getPeer(transfer), stream_id);
	}
	@Convention(Style.StdCall)
	protected native static void libusb_transfer_set_stream_id(@Ptr long transfer, int stream_id);
	/**
	 * Original signature : <code>uint32_t libusb_transfer_get_stream_id(libusb_transfer*)</code><br>
	 * <i>native declaration : libusb.h:746</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_transfer_get_stream_id(Pointer<libusb_transfer > transfer) {
		return libusb_transfer_get_stream_id(Pointer.getPeer(transfer));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_transfer_get_stream_id(@Ptr long transfer);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the required \ref libusb_transfer fields
<br>
	 * for a control transfer.
<br>
	 * <br>
	 * If you pass a transfer buffer to this function, the first 8 bytes will
<br>
	 * be interpreted as a control setup packet, and the wLength field will be
<br>
	 * used to automatically populate the \ref libusb_transfer::length "length"
<br>
	 * field of the transfer. Therefore the recommended approach is:
<br>
	 * -# Allocate a suitably sized data buffer (including space for control setup)
<br>
	 * -# Call libusb_fill_control_setup()
<br>
	 * -# If this is a host-to-device transfer with a data stage, put the data
<br>
	 *    in place after the setup packet
<br>
	 * -# Call this function
<br>
	 * -# Call libusb_submit_transfer()
<br>
	 * <br>
	 * It is also legal to pass a NULL buffer to this function, in which case this
<br>
	 * function will not attempt to populate the length field. Remember that you
<br>
	 * must then populate the buffer and length fields later.
<br>
	 * <br>
	 * \param transfer the transfer to populate
<br>
	 * \param dev_handle handle of the device that will handle the transfer
<br>
	 * \param buffer data buffer. If provided, this function will interpret the
<br>
	 * first 8 bytes as a setup packet and infer the transfer length from that.
<br>
	 * This pointer must be aligned to at least 2 bytes boundary.
<br>
	 * \param callback callback function to be invoked on transfer completion
<br>
	 * \param user_data user data to pass to callback function
<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_control_transfer(libusb_transfer*, libusb_device_handle*, unsigned char*, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:788</i>
	 */
	public static void libusb_fill_control_transfer(Pointer<libusb_transfer > transfer, Pointer<libusb_device_handle > dev_handle, Pointer<Byte > buffer, Pointer<libusb_transfer_cb_fn > callback, Pointer<? > user_data, int timeout) {
		libusb_fill_control_transfer(Pointer.getPeer(transfer), Pointer.getPeer(dev_handle), Pointer.getPeer(buffer), Pointer.getPeer(callback), Pointer.getPeer(user_data), timeout);
	}
	protected native static void libusb_fill_control_transfer(@Ptr long transfer, @Ptr long dev_handle, @Ptr long buffer, @Ptr long callback, @Ptr long user_data, int timeout);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the required \ref libusb_transfer fields
<br>
	 * for a bulk transfer.
<br>
	 * <br>
	 * \param transfer the transfer to populate
<br>
	 * \param dev_handle handle of the device that will handle the transfer
<br>
	 * \param endpoint address of the endpoint where this transfer will be sent
<br>
	 * \param buffer data buffer
<br>
	 * \param length length of data buffer
<br>
	 * \param callback callback function to be invoked on transfer completion
<br>
	 * \param user_data user data to pass to callback function
<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:813</i>
	 */
	public static void libusb_fill_bulk_transfer(Pointer<libusb_transfer > transfer, Pointer<libusb_device_handle > dev_handle, byte endpoint, Pointer<Byte > buffer, int length, Pointer<libusb_transfer_cb_fn > callback, Pointer<? > user_data, int timeout) {
		libusb_fill_bulk_transfer(Pointer.getPeer(transfer), Pointer.getPeer(dev_handle), endpoint, Pointer.getPeer(buffer), length, Pointer.getPeer(callback), Pointer.getPeer(user_data), timeout);
	}
	protected native static void libusb_fill_bulk_transfer(@Ptr long transfer, @Ptr long dev_handle, byte endpoint, @Ptr long buffer, int length, @Ptr long callback, @Ptr long user_data, int timeout);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the required \ref libusb_transfer fields
<br>
	 * for a bulk transfer using bulk streams.
<br>
	 * <br>
	 * Since version 1.0.19, \ref LIBUSB_API_VERSION >= 0x01000103
<br>
	 * <br>
	 * \param transfer the transfer to populate
<br>
	 * \param dev_handle handle of the device that will handle the transfer
<br>
	 * \param endpoint address of the endpoint where this transfer will be sent
<br>
	 * \param stream_id bulk stream id for this transfer
<br>
	 * \param buffer data buffer
<br>
	 * \param length length of data buffer
<br>
	 * \param callback callback function to be invoked on transfer completion
<br>
	 * \param user_data user data to pass to callback function
<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_stream_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, uint32_t, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:836</i>
	 */
	public static void libusb_fill_bulk_stream_transfer(Pointer<libusb_transfer > transfer, Pointer<libusb_device_handle > dev_handle, byte endpoint, int stream_id, Pointer<Byte > buffer, int length, Pointer<libusb_transfer_cb_fn > callback, Pointer<? > user_data, int timeout) {
		libusb_fill_bulk_stream_transfer(Pointer.getPeer(transfer), Pointer.getPeer(dev_handle), endpoint, stream_id, Pointer.getPeer(buffer), length, Pointer.getPeer(callback), Pointer.getPeer(user_data), timeout);
	}
	protected native static void libusb_fill_bulk_stream_transfer(@Ptr long transfer, @Ptr long dev_handle, byte endpoint, int stream_id, @Ptr long buffer, int length, @Ptr long callback, @Ptr long user_data, int timeout);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the required \ref libusb_transfer fields
<br>
	 * for an interrupt transfer.
<br>
	 * <br>
	 * \param transfer the transfer to populate
<br>
	 * \param dev_handle handle of the device that will handle the transfer
<br>
	 * \param endpoint address of the endpoint where this transfer will be sent
<br>
	 * \param buffer data buffer
<br>
	 * \param length length of data buffer
<br>
	 * \param callback callback function to be invoked on transfer completion
<br>
	 * \param user_data user data to pass to callback function
<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_interrupt_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:861</i>
	 */
	public static void libusb_fill_interrupt_transfer(Pointer<libusb_transfer > transfer, Pointer<libusb_device_handle > dev_handle, byte endpoint, Pointer<Byte > buffer, int length, Pointer<libusb_transfer_cb_fn > callback, Pointer<? > user_data, int timeout) {
		libusb_fill_interrupt_transfer(Pointer.getPeer(transfer), Pointer.getPeer(dev_handle), endpoint, Pointer.getPeer(buffer), length, Pointer.getPeer(callback), Pointer.getPeer(user_data), timeout);
	}
	protected native static void libusb_fill_interrupt_transfer(@Ptr long transfer, @Ptr long dev_handle, byte endpoint, @Ptr long buffer, int length, @Ptr long callback, @Ptr long user_data, int timeout);
	/**
	 * \ingroup asyncio
<br>
	 * Helper function to populate the required \ref libusb_transfer fields
<br>
	 * for an isochronous transfer.
<br>
	 * <br>
	 * \param transfer the transfer to populate
<br>
	 * \param dev_handle handle of the device that will handle the transfer
<br>
	 * \param endpoint address of the endpoint where this transfer will be sent
<br>
	 * \param buffer data buffer
<br>
	 * \param length length of data buffer
<br>
	 * \param num_iso_packets the number of isochronous packets
<br>
	 * \param callback callback function to be invoked on transfer completion
<br>
	 * \param user_data user data to pass to callback function
<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_iso_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:888</i>
	 */
	public static void libusb_fill_iso_transfer(Pointer<libusb_transfer > transfer, Pointer<libusb_device_handle > dev_handle, byte endpoint, Pointer<Byte > buffer, int length, int num_iso_packets, Pointer<libusb_transfer_cb_fn > callback, Pointer<? > user_data, int timeout) {
		libusb_fill_iso_transfer(Pointer.getPeer(transfer), Pointer.getPeer(dev_handle), endpoint, Pointer.getPeer(buffer), length, num_iso_packets, Pointer.getPeer(callback), Pointer.getPeer(user_data), timeout);
	}
	protected native static void libusb_fill_iso_transfer(@Ptr long transfer, @Ptr long dev_handle, byte endpoint, @Ptr long buffer, int length, int num_iso_packets, @Ptr long callback, @Ptr long user_data, int timeout);
	/**
	 * \ingroup asyncio
<br>
	 * Convenience function to set the length of all packets in an isochronous
<br>
	 * transfer, based on the num_iso_packets field in the transfer structure.
<br>
	 * <br>
	 * \param transfer a transfer
<br>
	 * \param length the length to set in each isochronous packet descriptor
<br>
	 * \see libusb_get_max_packet_size()<br>
	 * Original signature : <code>void libusb_set_iso_packet_lengths(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:901</i>
	 */
	public static void libusb_set_iso_packet_lengths(Pointer<libusb_transfer > transfer, int length) {
		libusb_set_iso_packet_lengths(Pointer.getPeer(transfer), length);
	}
	protected native static void libusb_set_iso_packet_lengths(@Ptr long transfer, int length);
	/**
	 * \ingroup asyncio
<br>
	 * Convenience function to locate the position of an isochronous packet
<br>
	 * within the buffer of an isochronous transfer.
<br>
	 * <br>
	 * This is a thorough function which loops through all preceding packets,
<br>
	 * accumulating their lengths to find the position of the specified packet.
<br>
	 * Typically you will assign equal lengths to each packet in the transfer,
<br>
	 * and hence the above method is sub-optimal. You may wish to use
<br>
	 * libusb_get_iso_packet_buffer_simple() instead.
<br>
	 * <br>
	 * \param transfer a transfer
<br>
	 * \param packet the packet to return the address of
<br>
	 * \returns the base address of the packet buffer inside the transfer buffer,
<br>
	 * or NULL if the packet does not exist.
<br>
	 * \see libusb_get_iso_packet_buffer_simple()<br>
	 * Original signature : <code>char* libusb_get_iso_packet_buffer(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:930</i>
	 */
	public static Pointer<Byte > libusb_get_iso_packet_buffer(Pointer<libusb_transfer > transfer, int packet) {
		return (Pointer)Pointer.pointerToAddress(libusb_get_iso_packet_buffer(Pointer.getPeer(transfer), packet), Byte.class);
	}
	@Ptr 
	protected native static long libusb_get_iso_packet_buffer(@Ptr long transfer, int packet);
	/**
	 * \ingroup asyncio
<br>
	 * Convenience function to locate the position of an isochronous packet
<br>
	 * within the buffer of an isochronous transfer, for transfers where each
<br>
	 * packet is of identical size.
<br>
	 * <br>
	 * This function relies on the assumption that every packet within the transfer
<br>
	 * is of identical size to the first packet. Calculating the location of
<br>
	 * the packet buffer is then just a simple calculation:
<br>
	 * <tt>buffer + (packet_size * packet)</tt>
<br>
	 * <br>
	 * Do not use this function on transfers other than those that have identical
<br>
	 * packet lengths for each packet.
<br>
	 * <br>
	 * \param transfer a transfer
<br>
	 * \param packet the packet to return the address of
<br>
	 * \returns the base address of the packet buffer inside the transfer buffer,
<br>
	 * or NULL if the packet does not exist.
<br>
	 * \see libusb_get_iso_packet_buffer()<br>
	 * Original signature : <code>char* libusb_get_iso_packet_buffer_simple(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:960</i>
	 */
	public static Pointer<Byte > libusb_get_iso_packet_buffer_simple(Pointer<libusb_transfer > transfer, int packet) {
		return (Pointer)Pointer.pointerToAddress(libusb_get_iso_packet_buffer_simple(Pointer.getPeer(transfer), packet), Byte.class);
	}
	@Ptr 
	protected native static long libusb_get_iso_packet_buffer_simple(@Ptr long transfer, int packet);
	/**
	 * sync I/O<br>
	 * Original signature : <code>int libusb_control_transfer(libusb_device_handle*, uint8_t, uint8_t, uint16_t, uint16_t, unsigned char*, uint16_t, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:965</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_control_transfer(Pointer<libusb_device_handle > dev_handle, byte request_type, byte bRequest, short wValue, short wIndex, Pointer<Byte > data, short wLength, int timeout) {
		return libusb_control_transfer(Pointer.getPeer(dev_handle), request_type, bRequest, wValue, wIndex, Pointer.getPeer(data), wLength, timeout);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_control_transfer(@Ptr long dev_handle, byte request_type, byte bRequest, short wValue, short wIndex, @Ptr long data, short wLength, int timeout);
	/**
	 * Original signature : <code>int libusb_bulk_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:967</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_bulk_transfer(Pointer<libusb_device_handle > dev_handle, byte endpoint, Pointer<Byte > data, int length, Pointer<Integer > actual_length, int timeout) {
		return libusb_bulk_transfer(Pointer.getPeer(dev_handle), endpoint, Pointer.getPeer(data), length, Pointer.getPeer(actual_length), timeout);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_bulk_transfer(@Ptr long dev_handle, byte endpoint, @Ptr long data, int length, @Ptr long actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_interrupt_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : libusb.h:969</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_interrupt_transfer(Pointer<libusb_device_handle > dev_handle, byte endpoint, Pointer<Byte > data, int length, Pointer<Integer > actual_length, int timeout) {
		return libusb_interrupt_transfer(Pointer.getPeer(dev_handle), endpoint, Pointer.getPeer(data), length, Pointer.getPeer(actual_length), timeout);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_interrupt_transfer(@Ptr long dev_handle, byte endpoint, @Ptr long data, int length, @Ptr long actual_length, int timeout);
	/**
	 * \ingroup desc
<br>
	 * Retrieve a descriptor from the default control pipe.
<br>
	 * This is a convenience function which formulates the appropriate control
<br>
	 * message to retrieve the descriptor.
<br>
	 * <br>
	 * \param dev a device handle
<br>
	 * \param desc_type the descriptor type, see \ref libusb_descriptor_type
<br>
	 * \param desc_index the index of the descriptor to retrieve
<br>
	 * \param data output buffer for descriptor
<br>
	 * \param length size of data buffer
<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_get_descriptor(libusb_device_handle*, uint8_t, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : libusb.h:986</i>
	 */
	public static int libusb_get_descriptor(Pointer<libusb_device_handle > dev, byte desc_type, byte desc_index, Pointer<Byte > data, int length) {
		return libusb_get_descriptor(Pointer.getPeer(dev), desc_type, desc_index, Pointer.getPeer(data), length);
	}
	protected native static int libusb_get_descriptor(@Ptr long dev, byte desc_type, byte desc_index, @Ptr long data, int length);
	/**
	 * \ingroup desc
<br>
	 * Retrieve a descriptor from a device.
<br>
	 * This is a convenience function which formulates the appropriate control
<br>
	 * message to retrieve the descriptor. The string returned is Unicode, as
<br>
	 * detailed in the USB specifications.
<br>
	 * <br>
	 * \param dev a device handle
<br>
	 * \param desc_index the index of the descriptor to retrieve
<br>
	 * \param langid the language ID for the string descriptor
<br>
	 * \param data output buffer for descriptor
<br>
	 * \param length size of data buffer
<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure
<br>
	 * \see libusb_get_string_descriptor_ascii()<br>
	 * Original signature : <code>int libusb_get_string_descriptor(libusb_device_handle*, uint8_t, uint16_t, unsigned char*, int)</code><br>
	 * <i>native declaration : libusb.h:1005</i>
	 */
	public static int libusb_get_string_descriptor(Pointer<libusb_device_handle > dev, byte desc_index, short langid, Pointer<Byte > data, int length) {
		return libusb_get_string_descriptor(Pointer.getPeer(dev), desc_index, langid, Pointer.getPeer(data), length);
	}
	protected native static int libusb_get_string_descriptor(@Ptr long dev, byte desc_index, short langid, @Ptr long data, int length);
	/**
	 * Original signature : <code>int libusb_get_string_descriptor_ascii(libusb_device_handle*, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : libusb.h:1007</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_string_descriptor_ascii(Pointer<libusb_device_handle > dev, byte desc_index, Pointer<Byte > data, int length) {
		return libusb_get_string_descriptor_ascii(Pointer.getPeer(dev), desc_index, Pointer.getPeer(data), length);
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_string_descriptor_ascii(@Ptr long dev, byte desc_index, @Ptr long data, int length);
	/**
	 * polling and timeouts<br>
	 * Original signature : <code>int libusb_try_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1012</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_try_lock_events(Pointer<libusb_context > ctx) {
		return libusb_try_lock_events(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_try_lock_events(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1014</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_lock_events(Pointer<libusb_context > ctx) {
		libusb_lock_events(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_lock_events(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_unlock_events(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1016</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_unlock_events(Pointer<libusb_context > ctx) {
		libusb_unlock_events(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_unlock_events(@Ptr long ctx);
	/**
	 * Original signature : <code>int libusb_event_handling_ok(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1018</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_event_handling_ok(Pointer<libusb_context > ctx) {
		return libusb_event_handling_ok(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_event_handling_ok(@Ptr long ctx);
	/**
	 * Original signature : <code>int libusb_event_handler_active(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1020</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_event_handler_active(Pointer<libusb_context > ctx) {
		return libusb_event_handler_active(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_event_handler_active(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_lock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1022</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_lock_event_waiters(Pointer<libusb_context > ctx) {
		libusb_lock_event_waiters(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_lock_event_waiters(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_unlock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1024</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_unlock_event_waiters(Pointer<libusb_context > ctx) {
		libusb_unlock_event_waiters(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_unlock_event_waiters(@Ptr long ctx);
	/**
	 * Original signature : <code>int libusb_wait_for_event(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : libusb.h:1026</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_wait_for_event(Pointer<libusb_context > ctx, Pointer<timeval > tv) {
		return libusb_wait_for_event(Pointer.getPeer(ctx), Pointer.getPeer(tv));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_wait_for_event(@Ptr long ctx, @Ptr long tv);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : libusb.h:1028</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_handle_events_timeout(Pointer<libusb_context > ctx, Pointer<timeval > tv) {
		return libusb_handle_events_timeout(Pointer.getPeer(ctx), Pointer.getPeer(tv));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_handle_events_timeout(@Ptr long ctx, @Ptr long tv);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout_completed(libusb_context*, timeval*, int*)</code><br>
	 * <i>native declaration : libusb.h:1030</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_handle_events_timeout_completed(Pointer<libusb_context > ctx, Pointer<timeval > tv, Pointer<Integer > completed) {
		return libusb_handle_events_timeout_completed(Pointer.getPeer(ctx), Pointer.getPeer(tv), Pointer.getPeer(completed));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_handle_events_timeout_completed(@Ptr long ctx, @Ptr long tv, @Ptr long completed);
	/**
	 * Original signature : <code>int libusb_handle_events(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1032</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_handle_events(Pointer<libusb_context > ctx) {
		return libusb_handle_events(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_handle_events(@Ptr long ctx);
	/**
	 * Original signature : <code>int libusb_handle_events_completed(libusb_context*, int*)</code><br>
	 * <i>native declaration : libusb.h:1034</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_handle_events_completed(Pointer<libusb_context > ctx, Pointer<Integer > completed) {
		return libusb_handle_events_completed(Pointer.getPeer(ctx), Pointer.getPeer(completed));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_handle_events_completed(@Ptr long ctx, @Ptr long completed);
	/**
	 * Original signature : <code>int libusb_handle_events_locked(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : libusb.h:1036</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_handle_events_locked(Pointer<libusb_context > ctx, Pointer<timeval > tv) {
		return libusb_handle_events_locked(Pointer.getPeer(ctx), Pointer.getPeer(tv));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_handle_events_locked(@Ptr long ctx, @Ptr long tv);
	/**
	 * Original signature : <code>int libusb_pollfds_handle_timeouts(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1038</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_pollfds_handle_timeouts(Pointer<libusb_context > ctx) {
		return libusb_pollfds_handle_timeouts(Pointer.getPeer(ctx));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_pollfds_handle_timeouts(@Ptr long ctx);
	/**
	 * Original signature : <code>int libusb_get_next_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : libusb.h:1040</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_get_next_timeout(Pointer<libusb_context > ctx, Pointer<timeval > tv) {
		return libusb_get_next_timeout(Pointer.getPeer(ctx), Pointer.getPeer(tv));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_get_next_timeout(@Ptr long ctx, @Ptr long tv);
	/**
	 * Original signature : <code>libusb_pollfd** libusb_get_pollfds(libusb_context*)</code><br>
	 * <i>native declaration : libusb.h:1073</i>
	 */
	@Convention(Style.StdCall)
	public static Pointer<Pointer<libusb_pollfd > > libusb_get_pollfds(Pointer<libusb_context > ctx) {
		return (Pointer)Pointer.pointerToAddress(libusb_get_pollfds(Pointer.getPeer(ctx)), DefaultParameterizedType.paramType(Pointer.class, libusb_pollfd.class));
	}
	@Convention(Style.StdCall)
	@Ptr 
	protected native static long libusb_get_pollfds(@Ptr long ctx);
	/**
	 * Original signature : <code>void libusb_set_pollfd_notifiers(libusb_context*, libusb_pollfd_added_cb, libusb_pollfd_removed_cb, void*)</code><br>
	 * <i>native declaration : libusb.h:1075</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_set_pollfd_notifiers(Pointer<libusb_context > ctx, Pointer<libusb_pollfd_added_cb > added_cb, Pointer<libusb_pollfd_removed_cb > removed_cb, Pointer<? > user_data) {
		libusb_set_pollfd_notifiers(Pointer.getPeer(ctx), Pointer.getPeer(added_cb), Pointer.getPeer(removed_cb), Pointer.getPeer(user_data));
	}
	@Convention(Style.StdCall)
	protected native static void libusb_set_pollfd_notifiers(@Ptr long ctx, @Ptr long added_cb, @Ptr long removed_cb, @Ptr long user_data);
	/**
	 * \ingroup hotplug
<br>
	 * Register a hotplug callback function
<br>
	 * <br>
	 * Register a callback with the libusb_context. The callback will fire
<br>
	 * when a matching event occurs on a matching device. The callback is
<br>
	 * armed until either it is deregistered with libusb_hotplug_deregister_callback()
<br>
	 * or the supplied callback returns 1 to indicate it is finished processing events.
<br>
	 * <br>
	 * If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be
<br>
	 * called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices
<br>
	 * already plugged into the machine. Note that libusb modifies its internal
<br>
	 * device list from a separate thread, while calling hotplug callbacks from
<br>
	 * libusb_handle_events(), so it is possible for a device to already be present
<br>
	 * on, or removed from, its internal device list, while the hotplug callbacks
<br>
	 * still need to be dispatched. This means that when using \ref
<br>
	 * LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival
<br>
	 * of the same device, once from libusb_hotplug_register_callback() and once
<br>
	 * from libusb_handle_events(); and/or your callback may be called for the
<br>
	 * removal of a device for which an arrived call was never made.
<br>
	 * <br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
<br>
	 * <br>
	 * \param[in] ctx context to register this callback with
<br>
	 * \param[in] events bitwise or of events that will trigger this callback. See \ref
<br>
	 *            libusb_hotplug_event
<br>
	 * \param[in] flags hotplug callback flags. See \ref libusb_hotplug_flag
<br>
	 * \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
<br>
	 * \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
<br>
	 * \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY
<br>
	 * \param[in] cb_fn the function to be invoked on a matching event/device
<br>
	 * \param[in] user_data user data to pass to the callback function
<br>
	 * \param[out] handle pointer to store the handle of the allocated callback (can be NULL)
<br>
	 * \returns LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_hotplug_register_callback(libusb_context*, libusb_hotplug_event, libusb_hotplug_flag, int, int, int, libusb_hotplug_callback_fn, void*, libusb_hotplug_callback_handle*)</code><br>
	 * <i>native declaration : libusb.h:1171</i>
	 */
	@Convention(Style.StdCall)
	public static int libusb_hotplug_register_callback(Pointer<libusb_context > ctx, IntValuedEnum<libusb_hotplug_event > events, IntValuedEnum<libusb_hotplug_flag > flags, int vendor_id, int product_id, int dev_class, Pointer<libusb_hotplug_callback_fn > cb_fn, Pointer<? > user_data, Pointer<Integer > handle) {
		return libusb_hotplug_register_callback(Pointer.getPeer(ctx), (int)events.value(), (int)flags.value(), vendor_id, product_id, dev_class, Pointer.getPeer(cb_fn), Pointer.getPeer(user_data), Pointer.getPeer(handle));
	}
	@Convention(Style.StdCall)
	protected native static int libusb_hotplug_register_callback(@Ptr long ctx, int events, int flags, int vendor_id, int product_id, int dev_class, @Ptr long cb_fn, @Ptr long user_data, @Ptr long handle);
	/**
	 * \ingroup hotplug
<br>
	 * Deregisters a hotplug callback.
<br>
	 * <br>
	 * Deregister a callback from a libusb_context. This function is safe to call from within
<br>
	 * a hotplug callback.
<br>
	 * <br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102
<br>
	 * <br>
	 * \param[in] ctx context this callback is registered with
<br>
	 * \param[in] handle the handle of the callback to deregister<br>
	 * Original signature : <code>void libusb_hotplug_deregister_callback(libusb_context*, libusb_hotplug_callback_handle)</code><br>
	 * <i>native declaration : libusb.h:1185</i>
	 */
	@Convention(Style.StdCall)
	public static void libusb_hotplug_deregister_callback(Pointer<libusb_context > ctx, int handle) {
		libusb_hotplug_deregister_callback(Pointer.getPeer(ctx), handle);
	}
	@Convention(Style.StdCall)
	protected native static void libusb_hotplug_deregister_callback(@Ptr long ctx, int handle);
	/** Undefined type */
	public static interface libusb_context {
		
	};
	/** Undefined type */
	public static interface libusb_device_handle {
		
	};
	/** Undefined type */
	public static interface libusb_device {
		
	};
	/** Undefined type */
	public static interface timeval {
		
	};
}
